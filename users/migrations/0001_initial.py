# Generated by Django 5.2.3 on 2025-06-26 14:02

import common.snowflake
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigIntegerField(default=common.snowflake.generate_id, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_time', models.DateTimeField(blank=True, null=True)),
                ('nickname', models.CharField(max_length=20)),
                ('phone_number', models.CharField(max_length=50, unique=True)),
                ('role', models.CharField(choices=[('UNKNOWN', 'Unknown'), ('USER', 'User'), ('ADMIN', 'Admin')], default='USER', max_length=20)),
                ('password', models.CharField(max_length=255)),
                ('username', models.CharField(max_length=50, unique=True)),
                ('profile_image', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'users',
            },
        ),
        migrations.CreateModel(
            name='NotificationSetting',
            fields=[
                ('id', models.BigIntegerField(default=common.snowflake.generate_id, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_time', models.DateTimeField(blank=True, null=True)),
                ('chat', models.BooleanField(default=True)),
                ('friendship', models.BooleanField(default=True)),
                ('chat_room_membership_request', models.BooleanField(default=True)),
                ('user', models.OneToOneField(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='users.user')),
            ],
            options={
                'db_table': 'notification_settings',
            },
        ),
        migrations.CreateModel(
            name='FriendshipRequest',
            fields=[
                ('id', models.BigIntegerField(default=common.snowflake.generate_id, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_time', models.DateTimeField(blank=True, null=True)),
                ('status', models.IntegerField(choices=[(0, 'Pending'), (1, 'Accepted'), (2, 'Rejected'), (3, 'Cancelled')], default=0)),
                ('from_user', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='sent_requests', to='users.user')),
                ('to_user', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='received_requests', to='users.user')),
            ],
            options={
                'db_table': 'friendship_requests',
                'unique_together': {('to_user', 'from_user')},
            },
        ),
        migrations.CreateModel(
            name='Friend',
            fields=[
                ('id', models.BigIntegerField(default=common.snowflake.generate_id, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_time', models.DateTimeField(blank=True, null=True)),
                ('status', models.IntegerField(choices=[(0, 'Friend'), (1, 'Blocked')], default=0)),
                ('friend', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='friend_of', to='users.user')),
                ('user', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='friends', to='users.user')),
            ],
            options={
                'db_table': 'friends',
                'unique_together': {('user', 'friend')},
            },
        ),
    ]
